###############################################################################
#  Copyright (c) 2014-2015 libbitcoin-node developers (see COPYING).
#
#         GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY
#
###############################################################################

language:
    - cpp

os:
    - osx
    - linux
    
compiler:
    - clang
    - gcc
    
env:
    - LINK=static
    - LINK=dynamic

matrix:
    exclude:
        - os: osx
          compiler: gcc
    fast_finish:
        - true

before_install:

    # Set aliases for readability.
    - if [[ $CC             == gcc     ]]; then GCC=true; fi
    - if [[ $CC             == clang   ]]; then CLANG=true; fi
    - if [[ $LINK           == static  ]]; then STATIC=true; fi
    - if [[ $LINK           == dynamic ]]; then DYNAMIC=true; fi
    - if [[ $TRAVIS_OS_NAME == osx     ]]; then OSX=true; fi
    - if [[ $TRAVIS_OS_NAME == linux   ]]; then LINUX=true; fi

    # Set package repository.
    - if [[ $LINUX           ]]; then sudo add-apt-repository -y ppa:boost-latest/ppa; fi
    - if [[ $LINUX           ]]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
    - if [[ $LINUX && $CLANG ]]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi

    # Update the system.
    - if [[ $LINUX           ]]; then sudo apt-get -qq update; fi

install:

    # Install g++ 4.8
    - if [[ $LINUX           ]]; then sudo apt-get install -qq g++-4.8 --allow-unauthenticated; fi
    - if [[ $LINUX           ]]; then sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50; fi
    - if [[ $LINUX           ]]; then sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50; fi
    - if [[ $LINUX           ]]; then sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-4.8 50; fi

    # Install clang++ 3.4
    - if [[ $LINUX && $CLANG ]]; then sudo apt-get install -qq clang-3.4 --allow-unauthenticated; fi
    - if [[ $LINUX && $CLANG ]]; then sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-3.4 50; fi
    - if [[ $LINUX && $CLANG ]]; then sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.4 50; fi

    # Download and install packages for linux/gcc/static.
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then sudo apt-get -qq install bash-completion; fi

    # Download and install packages for osx/clang/dynamic.
    - if [[ $OSX   && $CLANG && $DYNAMIC ]]; then brew unlink bash-completion; brew install bash-completion; fi

    # Download and install packages for linux/clang/dynamic.
    - if [[ $LINUX && $CLANG && $DYNAMIC ]]; then sudo apt-get -qq install boost1.54; fi

    # Download and install packages for linux/gcc/dynamic.
    - if [[ $LINUX && $GCC   && $DYNAMIC ]]; then sudo apt-get -qq install bash-completion; fi

script:

    # Download and build libbitcoin-node and all dependencies.
    - if [[ $OSX   && $CLANG && $STATIC  ]]; then ./install.sh --without-consensus --disable-shared --build-boost --prefix=$TRAVIS_BUILD_DIR/my-prefix; fi
    - if [[ $LINUX && $CLANG && $STATIC  ]]; then ./install.sh --disable-shared --build-boost --prefix=$TRAVIS_BUILD_DIR/my-prefix CFLAGS='-Os' LDLIBS='-lstdc++' CXXFLAGS='-Os -stdlib=libstdc++'; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then ./install.sh --build-boost --disable-shared --build-dir=my-build --prefix=$TRAVIS_BUILD_DIR/my-prefix --with-bash-completiondir CFLAGS='-O0 -g -static --coverage' CXXFLAGS='-O0 -g -static --coverage'; fi
    - if [[ $OSX   && $CLANG && $DYNAMIC ]]; then ./install.sh --with-bash-completiondir; fi
    - if [[ $LINUX && $CLANG && $DYNAMIC ]]; then sudo CXX=$CXX CC=$CC ./install.sh --disable-ndebug --disable-static CFLAGS='-Os' LDLIBS='-lstdc++' CXXFLAGS='-Os -stdlib=libstdc++'; fi
    - if [[ $LINUX && $GCC   && $DYNAMIC ]]; then sudo CXX=$CXX CC=$CC ./install.sh --without-consensus --disable-static --build-boost --with-bash-completiondir CFLAGS='-Os -s' CXXFLAGS='-Os -s'; fi

after_success:

    # Install coveralls and current lcov.
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then tar xf lcov_1.11.orig.tar.gz; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then sudo make -C lcov-1.11 install; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then gem install coveralls-lcov; fi

    # Capture coverage info, filter out system and test code, and debug before upload.
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --directory . --capture --output-file coverage.info; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --remove coverage.info "/usr/*" "$TRAVIS_BUILD_DIR/my-prefix/*" "my-build/*" "test/*" --output-file coverage.info; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --list coverage.info; fi
    
    # Upload coverage info to coveralls service (--repo-token <private coveralls repo token>).
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then coveralls-lcov coverage.info; fi
